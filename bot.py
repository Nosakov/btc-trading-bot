import os
import time
import json
import pandas as pd
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from binance.exceptions import BinanceAPIException

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===
load_dotenv()
SYMBOL = "BTCUSDT"
INTERVAL = "1m"
TRADE_QUANTITY = 0.002  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ ===
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

client = BinanceClient(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from websocket_handler import BinanceWebSocketManager
from strategy import execute_strategy, execute_grid_strategy
from notifier import create_notifier

send_telegram_message = create_notifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ===
df_stream = pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π ===
active_position = None  # 'long' / 'short' / None
entry_price = 0.0
oco_set = False

STOP_LOSS_PERCENT = 0.005  # 0.5%
TAKE_PROFIT_PERCENT = 0.01  # 1%


# === –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å TP –∏ SL ===
def place_order(symbol, side, quantity):
    global active_position, entry_price, oco_set

    try:
        if side == 'buy':
            order = client.order_market_buy(symbol=symbol, quantity=quantity)
            price = float(order['fills'][0]['price'])
            take_profit = price * (1 + TAKE_PROFIT_PERCENT)
            stop_loss = price * (1 - STOP_LOSS_PERCENT)

            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º OCO
            oco_order = client.create_oco_order(
                symbol=symbol,
                side='SELL',
                quantity=quantity,
                price=round(take_profit, 2),
                stopPrice=round(stop_loss, 2),
                stopLimitPrice=round(stop_loss * 0.995, 2),
                stopLimitTimeInForce='GTC'
            )

            oco_set = True  # –¢–µ–ø–µ—Ä—å OCO —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            active_position = 'long'
            entry_price = price

        elif side == 'sell' and active_position == 'long' and not oco_set:
            # –ï—Å–ª–∏ OCO –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ
            order = client.order_market_sell(symbol=symbol, quantity=quantity)
            active_position = None
            entry_price = 0.0
            oco_set = False

        elif side == 'sell' and active_position is None:
            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —à–æ—Ä—Ç –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCO
            order = client.order_market_sell(symbol=symbol, quantity=quantity)
            price = float(order['fills'][0]['price'])
            take_profit = price * (1 - TAKE_PROFIT_PERCENT)
            stop_loss = price * (1 + STOP_LOSS_PERCENT)

            oco_order = client.create_oco_order(
                symbol=symbol,
                side='BUY',
                quantity=quantity,
                price=round(take_profit, 2),
                stopPrice=round(stop_loss, 2),
                stopLimitPrice=round(stop_loss * 1.005, 2),
                stopLimitTimeInForce='GTC'
            )

            oco_set = True
            active_position = 'short'
            entry_price = price

        elif side == 'buy' and active_position == 'short' and not oco_set:
            order = client.order_market_buy(symbol=symbol, quantity=quantity)
            active_position = None
            entry_price = 0.0
            oco_set = False

        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞")
            return None

        return order

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ Binance:", e)
        send_telegram_message(f"‚ùå [–û–†–î–ï–†] –û—à–∏–±–∫–∞: {e}")
        oco_set = False
    return None


def monitor_active_orders(symbol="BTCUSDT"):
    global oco_set

    try:
        open_orders = client.get_open_orders(symbol=symbol)

        if open_orders:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            for order in open_orders:
                print(
                    f"üßæ –û—Ä–¥–µ—Ä ID: {order['orderId']} | –¢–∏–ø: {order['side']} | –¶–µ–Ω–∞: {order['price']}")

            oco_set = True
        else:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            oco_set = False

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤:", e)
        #send_telegram_message(f"‚ùå [–û–†–î–ï–†] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def process_message(msg):
    global df_stream, active_position, entry_price

    try:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON
        if isinstance(msg, str):
            #print("üì© –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON...")
            try:
                msg = json.loads(msg)
            except json.JSONDecodeError as ve:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", ve)
                return

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–∏—à–µ–¥—à–µ–µ
        # print("üì© –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)

        # –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'result' in msg and msg['result'] is None:
            print("üì° –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (subscribed)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if not (isinstance(msg, dict) and msg.get('e') == 'kline'):
            print("üì° –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–≤–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        kline = msg.get('k', {})
        symbol = kline.get('s')
        timestamp = int(kline.get('t'))
        open_price = float(kline.get('o'))
        high = float(kline.get('h'))
        low = float(kline.get('l'))
        close_price = float(kline.get('c'))
        volume = float(kline.get('v'))
        is_closed = kline.get('x')

        print(f"üïØÔ∏è –°–≤–µ—á–∞: {symbol} | –ó–∞–∫—Ä—ã—Ç–∞: {is_closed} | –¶–µ–Ω–∞: {close_price:.2f}")

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞
        if not is_closed:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        candle_time = pd.to_datetime(timestamp, unit='ms')
        if candle_time in df_stream.index:
            print("üîÅ –≠—Ç–∞ —Å–≤–µ—á–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
        df_new = pd.DataFrame([{
            'Open': open_price,
            'High': high,
            'Low': low,
            'Close': close_price,
            'Volume': volume
        }], index=[candle_time])

        df_combined = pd.concat([df_stream, df_new])
        df_combined.sort_index(inplace=True)
        df_combined = df_combined[~df_combined.index.duplicated()]

        df_stream = df_combined.copy()

        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df_stream)}")

        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if len(df_stream) >= 26:
            execute_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

        if len(df_stream) >= 50:
            execute_grid_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

        if len(df_stream) % 5 == 0:
            monitor_active_orders(SYMBOL)

        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π (–Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è OCO)
        latest_price = df_stream.iloc[-1]['Close']

        if active_position == 'long':
            current_return = (latest_price - entry_price) / entry_price
            if current_return <= -(STOP_LOSS_PERCENT + 0.001):
                print("üõë [–†–µ–∑–µ—Ä–≤] STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (LONG)")
                place_order(SYMBOL, 'sell', TRADE_QUANTITY)

            elif current_return >= TAKE_PROFIT_PERCENT + 0.01:
                print("üéØ [–†–µ–∑–µ—Ä–≤] TAKE PROFIT –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (LONG)")
                place_order(SYMBOL, 'sell', TRADE_QUANTITY)

        elif active_position == 'short':
            current_return = (entry_price - latest_price) / entry_price
            if current_return <= -(STOP_LOSS_PERCENT + 0.001):
                print("üõë [–†–µ–∑–µ—Ä–≤] STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (SHORT)")
                place_order(SYMBOL, 'buy', TRADE_QUANTITY)

            elif current_return >= TAKE_PROFIT_PERCENT + 0.01:
                print("üéØ [–†–µ–∑–µ—Ä–≤] TAKE PROFIT –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (SHORT)")
                place_order(SYMBOL, 'buy', TRADE_QUANTITY)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    ws_manager = BinanceWebSocketManager(SYMBOL, INTERVAL, process_message)
    ws_manager.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        ws_manager.stop()