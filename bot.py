import os
import time
import json
import asyncio
import pandas as pd
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from binance.exceptions import BinanceAPIException
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from io import BytesIO
import mplfinance as mpf
import nest_asyncio


nest_asyncio.apply()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===
load_dotenv()
SYMBOL = "BTCUSDT"
INTERVAL = "3m"
TRADE_QUANTITY = 0.002  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (Testnet Futures) ===
BINANCE_FUTURES_API_KEY = os.getenv("BINANCE_FUTURES_API_KEY")
BINANCE_FUTURES_SECRET_KEY = os.getenv("BINANCE_FUTURES_SECRET_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
client = BinanceClient(
    api_key=BINANCE_FUTURES_API_KEY,
    api_secret=BINANCE_FUTURES_SECRET_KEY,
    testnet=True
)

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from websocket_handler import BinanceFuturesWebSocketManager
from strategy import execute_strategy, execute_grid_strategy
from notifier import create_notifier

send_telegram_message = create_notifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ===
df_stream = pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π ===
active_position = None  # 'long' / 'short' / None
entry_price = 0.0
oco_set = False
position_closed_recently = False
last_position_close_time = 0
STOP_LOSS_PERCENT = 0.003  # 0.3%
TAKE_PROFIT_PERCENT = 0.005  # 0.5%

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (Testnet Futures) ===
def load_historical_data(symbol="BTCUSDT", interval="1m", hours=24):
    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {hours} —á–∞—Å–æ–≤...")
    end_time = pd.Timestamp.now(tz='UTC')
    start_time = end_time - pd.Timedelta(hours=hours)
    start_ts = int(start_time.timestamp() * 1000)
    end_ts = int(end_time.timestamp() * 1000)
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, startTime=start_ts, endTime=end_ts)
        if not klines:
            print("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
            return pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])

        df = pd.DataFrame(klines, columns=[
            'timestamp', 'Open', 'High', 'Low', 'Close', 'Volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_volume', 'taker_buy_quote_volume', 'ignore'
        ])

        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df[['Open', 'High', 'Low', 'Close', 'Volume']] = df[
            ['Open', 'High', 'Low', 'Close', 'Volume']
        ].astype(float)
        df = df[['Open', 'High', 'Low', 'Close', 'Volume']]
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π")
        return df

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", e)
        send_telegram_message(f"‚ùå [HIST] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
        return pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])


# === –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å TP –∏ SL ===
def place_order(symbol, side, quantity):
    global active_position, entry_price, oco_set, position_closed_recently, last_position_close_time
    try:
        latest_price = df_stream.iloc[-1]['Close']
        if position_closed_recently and time.time() - last_position_close_time < 60:
            print("‚è≥ –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–æ–π...")
            return None

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞
        cancel_all_orders(symbol)

        if side == 'buy':
            order = client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='MARKET',
                quantity=quantity
            )
            take_profit = round(latest_price * (1 + TAKE_PROFIT_PERCENT), 2)
            stop_loss = round(latest_price * (1 - STOP_LOSS_PERCENT), 2)
            if take_profit <= 0 or stop_loss <= 0:
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è TP/SL ‚Äî –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é")
                send_telegram_message("‚ö†Ô∏è [–û–†–î–ï–†] TP/SL –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å ‚â§ 0")
                return None

            # Take Profit
            client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='TAKE_PROFIT_MARKET',
                stopPrice=round(take_profit, 2),
                closePosition=True
            )

            # Stop Loss
            client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='STOP_MARKET',
                stopPrice=round(stop_loss, 2),
                closePosition=True
            )

            message = f"üìà [BUY] –ö—É–ø–ª–µ–Ω–æ {quantity} {symbol}\n–¶–µ–Ω–∞: {latest_price:.2f}$\nTP: {take_profit:.2f}$\nSL: {stop_loss:.2f}$"
            send_telegram_message(message)
            active_position = 'long'
            entry_price = latest_price
            oco_set = True
            position_closed_recently = False

        elif side == 'sell' and active_position is None:
            # –ü—Ä–æ–¥–∞–∂–∞ —à–æ—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            order = client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='MARKET',
                quantity=quantity
            )
            take_profit = round(latest_price * (1 - TAKE_PROFIT_PERCENT), 2)
            stop_loss = round(latest_price * (1 + STOP_LOSS_PERCENT), 2)
            if take_profit <= 0 or stop_loss <= 0:
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è TP/SL ‚Äî –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é")
                send_telegram_message("‚ö†Ô∏è [–û–†–î–ï–†] TP/SL –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å ‚â§ 0")
                return None

            # Take Profit
            client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='TAKE_PROFIT_MARKET',
                stopPrice=round(take_profit, 2),
                closePosition=True
            )

            # Stop Loss
            client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='STOP_MARKET',
                stopPrice=round(stop_loss, 2),
                closePosition=True
            )

            message = f"üìâ [SHORT] –ü—Ä–æ–¥–∞–Ω–æ {quantity} {symbol}\n–¶–µ–Ω–∞: {latest_price:.2f}$\nTP: {take_profit:.2f}$\nSL: {stop_loss:.2f}$"
            send_telegram_message(message)
            active_position = 'short'
            entry_price = latest_price
            oco_set = True
            position_closed_recently = False

        elif side == 'sell' and active_position == 'long':
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ OCO
            order = client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='MARKET',
                quantity=quantity
            )
            message = f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {quantity} {symbol} –ø–æ {latest_price:.2f}"
            send_telegram_message(message)
            active_position = None
            entry_price = 0.0
            oco_set = False
            position_closed_recently = True
            last_position_close_time = time.time()

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞
            cancel_all_orders(symbol)

        elif side == 'buy' and active_position == 'short':
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            order = client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='MARKET',
                quantity=quantity
            )
            message = f"üìà [COVER] –ö—É–ø–ª–µ–Ω–æ {quantity} {symbol} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞\n–¶–µ–Ω–∞: {latest_price:.2f}"
            send_telegram_message(message)
            active_position = None
            entry_price = 0.0
            oco_set = False
            position_closed_recently = True
            last_position_close_time = time.time()

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞
            cancel_all_orders(symbol)

        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return None

        return order

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ Binance:", e)
        send_telegram_message(f"‚ùå [–û–†–î–ï–†] –û—à–∏–±–∫–∞: {e}")
        oco_set = False
    return None


# === –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Ç–∏–ø–∞ SL/TP ===
def cancel_all_orders(symbol="BTCUSDT"):
    try:
        open_orders = client.futures_get_all_orders(symbol=symbol, limit=50)
        stop_orders = [
            o for o in open_orders
            if o['status'] == 'NEW' and o['type'] in ['TAKE_PROFIT_MARKET', 'STOP_MARKET']
        ]
        if stop_orders:
            print(f"üõë –û—Ç–º–µ–Ω—è–µ–º {len(stop_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            for order in stop_orders:
                client.futures_cancel_order(symbol=symbol, orderId=order['orderId'])
            send_telegram_message(f"‚ùå [ORDERS] {len(stop_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ SL/TP")
    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤:", e)
        send_telegram_message(f"‚ùå [ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ===
def has_active_orders(symbol="BTCUSDT"):
    try:
        orders = client.futures_get_all_orders(symbol=symbol, limit=50)
        active = [o for o in orders if o['status'] == 'NEW' and o['type'] in ['TAKE_PROFIT_MARKET', 'STOP_MARKET']]
        return len(active) > 0
    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤:", e)
        return False


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ WebSocket ===
async def process_message(msg):
    global df_stream, active_position, entry_price, oco_set
    try:
        if isinstance(msg, str):
            try:
                msg = json.loads(msg)
            except json.JSONDecodeError:
                return

        # –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'result' in msg and msg['result'] is None:
            print("üì° –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (subscribed)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if not (isinstance(msg, dict) and msg.get('e') == 'kline'):
            print("üì° –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–≤–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        kline = msg.get('k', {})
        timestamp = int(kline.get('t'))
        open_price = float(kline.get('o'))
        high = float(kline.get('h'))
        low = float(kline.get('l'))
        close_price = float(kline.get('c'))
        volume = float(kline.get('v'))
        is_closed = kline.get('x')

        print(f"üïØÔ∏è –°–≤–µ—á–∞: {SYMBOL} | –ó–∞–∫—Ä—ã—Ç–∞: {is_closed} | –¶–µ–Ω–∞: {close_price:.2f}")

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞
        if not is_closed:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        candle_time = pd.to_datetime(timestamp, unit='ms')
        if candle_time in df_stream.index:
            print("üîÅ –≠—Ç–∞ —Å–≤–µ—á–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
        df_new = pd.DataFrame([{
            'Open': open_price,
            'High': high,
            'Low': low,
            'Close': close_price,
            'Volume': volume
        }], index=[candle_time])
        df_combined = pd.concat([df_stream, df_new]).drop_duplicates()
        df_combined.sort_index(inplace=True)
        df_stream = df_combined.tail(1000).copy()

        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df_stream)}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚Üí –∑–∞–ø—Ä–µ—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
        if has_active_orders(SYMBOL):
            print("üö´ –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if len(df_stream) >= 26:
            await execute_strategy(df_stream, send_telegram_message, place_order, SYMBOL)
        if len(df_stream) >= 50:
            await execute_grid_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        if len(df_stream) % 5 == 0:
            monitor_active_orders(SYMBOL)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ===
def monitor_active_orders(symbol="BTCUSDT"):
    global oco_set
    try:
        open_orders = client.futures_get_all_orders(symbol=symbol, limit=50)
        open_orders = [o for o in open_orders if o['status'] == 'NEW']
        if open_orders:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            for order in open_orders:
                print(f"üßæ ID: {order['orderId']} | –¶–µ–Ω–∞: {order['price']}")
            oco_set = True
        else:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            oco_set = False
    except BinanceAPIException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        oco_set = False


# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def get_positions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        positions = client.futures_position_information(symbol=SYMBOL)
        for pos in positions:
            if float(pos['positionAmt']) != 0:
                await update.message.reply_text(
                    f"üìä –ü–æ–∑–∏—Ü–∏—è: {pos['positionSide']} | –†–∞–∑–º–µ—Ä: {pos['positionAmt']} | –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entryPrice']}"
                )
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")


async def get_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        orders = client.futures_get_all_orders(symbol=SYMBOL, limit=50)
        if orders:
            for order in orders:
                await update.message.reply_text(
                    f"üßæ ID: {order['orderId']} | –°—Ç–æ—Ä–æ–Ω–∞: {order['side']} | –¶–µ–Ω–∞: {order['price']} | –°—Ç–∞—Ç—É—Å: {order['status']}"
                )
        else:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")


async def check_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        balance = client.futures_account_balance()
        for item in balance:
            if item['asset'] == 'USDT':
                await update.message.reply_text(f"üíº –ë–∞–ª–∞–Ω—Å USDT: {item['balance']} USDT")
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")


def generate_grid_chart(df, grid_levels=None):
    if len(df) < 50 or not grid_levels:
        return None
    df = df.tail(50).copy()
    buffer = BytesIO()

    lines = []
    for level in grid_levels:
        lines.append({
            'y1': float(level),
            'y2': float(level),
            'x1': df.index[0],  # –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            'x2': df.index[-1],  # –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            'color': 'gray',
            'linestyle': '--'
        })

    mpf.plot(
        df,
        type='candle',
        style='yahoo',
        title=f"{SYMBOL} - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π",
        alines={'alines': lines},
        volume=False,
        savefig=dict(fname=buffer, dpi=100, bbox_inches='tight'),
        figratio=(10, 6),
        figscale=1.5
    )
    buffer.seek(0)
    return buffer


async def send_grid_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    grid_levels = await execute_grid_strategy(df_stream, None, None, SYMBOL, dry_run=True)
    chart_buffer = generate_grid_chart(df_stream, list(map(float, grid_levels)))
    if chart_buffer:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=chart_buffer)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")


# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ WebSocket ===
async def run_websocket():
    ws_manager = BinanceFuturesWebSocketManager(SYMBOL, INTERVAL, process_message)
    await ws_manager.start()


# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ===
async def run_telegram_bot():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("positions", get_positions))
    app.add_handler(CommandHandler("orders", get_orders))
    app.add_handler(CommandHandler("gridchart", send_grid_chart))
    app.add_handler(CommandHandler("balance", check_balance))
    print("üì° Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ===
    if not BINANCE_FUTURES_API_KEY or not BINANCE_FUTURES_SECRET_KEY:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏")
        send_telegram_message("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è Binance")
        exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Testnet Futures
    try:
        balance = client.futures_account_balance()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏")
        print("üíº –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", balance[0])
    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)
        exit(1)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ WebSocket
    historical_df = load_historical_data(SYMBOL, INTERVAL, hours=24)
    if not historical_df.empty:
        df_stream = pd.concat([df_stream, historical_df]).drop_duplicates()
        df_stream.sort_index(inplace=True)
        print(f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã | –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df_stream)}")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

    async def main():
        bot_task = run_telegram_bot()
        ws_task = run_websocket()
        await asyncio.gather(bot_task, ws_task)

    asyncio.run(main())