import os
import time
import json
import pandas as pd
from dotenv import load_dotenv
from binance.client import Client as BinanceClient
from binance.exceptions import BinanceAPIException

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===
load_dotenv()
SYMBOL = "BTCUSDT"
INTERVAL = "1m"
TRADE_QUANTITY = 0.002  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (Testnet Futures) ===
BINANCE_FUTURES_API_KEY = os.getenv("BINANCE_FUTURES_API_KEY")
BINANCE_FUTURES_SECRET_KEY = os.getenv("BINANCE_FUTURES_SECRET_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
client = BinanceClient(
    api_key=BINANCE_FUTURES_API_KEY,
    api_secret=BINANCE_FUTURES_SECRET_KEY,
    testnet=True
)

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from websocket_handler import BinanceFuturesWebSocketManager
from strategy import execute_strategy, execute_grid_strategy
from notifier import create_notifier

send_telegram_message = create_notifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ===
df_stream = pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π ===
active_position = None  # 'long' / 'short' / None
entry_price = 0.0
oco_set = False

STOP_LOSS_PERCENT = 0.005  # 0.5%
TAKE_PROFIT_PERCENT = 0.01  # 1%


# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (Testnet Futures) ===
def load_historical_data(symbol="BTCUSDT", interval="1m", hours=24):
    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {hours} —á–∞—Å–æ–≤...")
    end_time = pd.Timestamp.now(tz='UTC')
    start_time = end_time - pd.Timedelta(hours=hours)

    start_ts = int(start_time.timestamp() * 1000)
    end_ts = int(end_time.timestamp() * 1000)

    try:
        klines = client.get_klines(symbol=symbol, interval=interval, startTime=start_ts, endTime=end_ts)

        if not klines:
            print("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
            return pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])

        df = pd.DataFrame(klines, columns=[
            'timestamp', 'Open', 'High', 'Low', 'Close', 'Volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_volume', 'taker_buy_quote_volume', 'ignore'
        ])

        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df[['Open', 'High', 'Low', 'Close', 'Volume']] = df[
            ['Open', 'High', 'Low', 'Close', 'Volume']
        ].astype(float)
        df = df[['Open', 'High', 'Low', 'Close', 'Volume']]
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π")
        return df

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", e)
        send_telegram_message(f"‚ùå [HIST] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
        return pd.DataFrame(columns=['Open', 'High', 'Low', 'Close', 'Volume'])


# === –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å TP –∏ SL ===
def place_order(symbol, side, quantity):
    global active_position, entry_price, oco_set

    try:
        if side == 'buy':
            order = client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='MARKET',
                quantity=quantity
            )
            price = float(order['avgPrice'])
            take_profit = price * (1 + TAKE_PROFIT_PERCENT)
            stop_loss = price * (1 - STOP_LOSS_PERCENT)

            # Take Profit
            client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='TAKE_PROFIT_MARKET',
                stopPrice=round(take_profit, 2),
                closePosition=True
            )

            # Stop Loss
            client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='STOP_MARKET',
                stopPrice=round(stop_loss, 2),
                closePosition=True
            )

            message = f"üìà [BUY] –ö—É–ø–ª–µ–Ω–æ {quantity} {symbol}\n–¶–µ–Ω–∞: {price:.2f}$\nTP: {take_profit:.2f}$\nSL: {stop_loss:.2f}$"
            send_telegram_message(message)

            active_position = 'long'
            entry_price = price
            oco_set = True

        elif side == 'sell' and active_position is None:
            # –ü—Ä–æ–¥–∞–∂–∞ —à–æ—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            order = client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='MARKET',
                quantity=quantity
            )
            price = float(order['avgPrice'])
            take_profit = price * (1 - TAKE_PROFIT_PERCENT)
            stop_loss = price * (1 + STOP_LOSS_PERCENT)

            # Take Profit
            client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='TAKE_PROFIT_MARKET',
                stopPrice=round(take_profit, 2),
                closePosition=True
            )

            # Stop Loss
            client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='STOP_MARKET',
                stopPrice=round(stop_loss, 2),
                closePosition=True
            )

            message = f"üìâ [SHORT] –ü—Ä–æ–¥–∞–Ω–æ {quantity} {symbol}\n–¶–µ–Ω–∞: {price:.2f}$\nTP: {take_profit:.2f}$\nSL: {stop_loss:.2f}$"
            send_telegram_message(message)

            active_position = 'short'
            entry_price = price
            oco_set = True

        elif side == 'sell' and active_position == 'long':
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ OCO
            order = client.futures_create_order(
                symbol=symbol,
                side='SELL',
                type='MARKET',
                quantity=quantity
            )
            price = float(order['avgPrice'])
            message = f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {quantity} {symbol} –ø–æ {price:.2f}"
            send_telegram_message(message)

            active_position = None
            entry_price = 0.0
            oco_set = False

        elif side == 'buy' and active_position == 'short':
            order = client.futures_create_order(
                symbol=symbol,
                side='BUY',
                type='MARKET',
                quantity=quantity
            )
            price = float(order['avgPrice'])
            message = f"üìà [COVER] –ö—É–ø–ª–µ–Ω–æ {quantity} {symbol} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞\n–¶–µ–Ω–∞: {price:.2f}"
            send_telegram_message(message)

            active_position = None
            entry_price = 0.0
            oco_set = False

        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return None

        return order

    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ Binance:", e)
        send_telegram_message(f"‚ùå [–û–†–î–ï–†] –û—à–∏–±–∫–∞: {e}")
        oco_set = False
    return None


# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ===
def monitor_active_orders(symbol="BTCUSDT"):
    global oco_set
    try:
        open_orders = client.futures_get_all_orders(symbol=symbol, limit=50)
        if open_orders:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            for order in open_orders:
                print(f"üßæ ID: {order['orderId']} | –¶–µ–Ω–∞: {order['price']}")
            oco_set = True
        else:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            oco_set = False

    except BinanceAPIException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤:{e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ WebSocket ===
def process_message(msg):
    global df_stream, active_position, entry_price, oco_set

    try:
        if isinstance(msg, str):
            try:
                msg = json.loads(msg)
            except json.JSONDecodeError:
                return

        # –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'result' in msg and msg['result'] is None:
            print("üì° –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (subscribed)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if not (isinstance(msg, dict) and msg.get('e') == 'kline'):
            print("üì° –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–≤–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        kline = msg.get('k', {})
        symbol = kline.get('s')
        timestamp = int(kline.get('t'))
        open_price = float(kline.get('o'))
        high = float(kline.get('h'))
        low = float(kline.get('l'))
        close_price = float(kline.get('c'))
        volume = float(kline.get('v'))
        is_closed = kline.get('x')

        print(f"üïØÔ∏è –°–≤–µ—á–∞: {symbol} | –ó–∞–∫—Ä—ã—Ç–∞: {is_closed} | –¶–µ–Ω–∞: {close_price:.2f}")

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞
        if not is_closed:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        candle_time = pd.to_datetime(timestamp, unit='ms')
        if candle_time in df_stream.index:
            print("üîÅ –≠—Ç–∞ —Å–≤–µ—á–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
        df_new = pd.DataFrame([{
            'Open': open_price,
            'High': high,
            'Low': low,
            'Close': close_price,
            'Volume': volume
        }], index=[candle_time])

        df_combined = pd.concat([df_stream, df_new])
        df_combined.sort_index(inplace=True)
        df_combined = df_combined[~df_combined.index.duplicated()]
        df_stream = df_combined.copy()

        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df_stream)}")

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π (—Ä–µ–∑–µ—Ä–≤)
        latest_price = df_stream.iloc[-1]['Close']

        if active_position == 'long':
            current_return = (latest_price - entry_price) / entry_price
            if current_return <= -(STOP_LOSS_PERCENT + 0.001):
                print("üõë [–†–µ–∑–µ—Ä–≤] STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (LONG)")
                place_order(SYMBOL, 'sell', TRADE_QUANTITY)
            elif current_return >= TAKE_PROFIT_PERCENT + 0.01:
                print("üéØ [–†–µ–∑–µ—Ä–≤] TAKE PROFIT –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (LONG)")
                place_order(SYMBOL, 'sell', TRADE_QUANTITY)

        elif active_position == 'short':
            current_return = (entry_price - latest_price) / entry_price
            if current_return <= -(STOP_LOSS_PERCENT + 0.001):
                print("üõë [–†–µ–∑–µ—Ä–≤] STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (SHORT)")
                place_order(SYMBOL, 'buy', TRADE_QUANTITY)
            elif current_return >= TAKE_PROFIT_PERCENT + 0.01:
                print("üéØ [–†–µ–∑–µ—Ä–≤] TAKE PROFIT –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (SHORT)")
                place_order(SYMBOL, 'buy', TRADE_QUANTITY)

        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if len(df_stream) >= 26:
            execute_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

        if len(df_stream) >= 50:
            execute_grid_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        if len(df_stream) % 5 == 0:
            monitor_active_orders(SYMBOL)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# def cancel_all_orders(symbol="BTCUSDT"):
#     try:
#         orders = client.get_open_orders(symbol=symbol)
#         if orders:
#             print(f"üö´ –û—Ç–º–µ–Ω—è–µ–º {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
#             for order in orders:
#                 client.cancel_order(symbol=symbol, orderId=order['orderId'])
#                 send_telegram_message(f"üö´ –û—Ä–¥–µ—Ä {order['orderId']} –æ—Ç–º–µ–Ω—ë–Ω")
#         else:
#             print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
#     except BinanceAPIException as e:
#         print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤:", e)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ===
    if not BINANCE_FUTURES_API_KEY or not BINANCE_FUTURES_SECRET_KEY:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏")
        send_telegram_message("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è Binance")
        exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Testnet Futures
    try:
        balance = client.futures_account_balance()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏")
        print("üíº –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", balance[0])
    except BinanceAPIException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", e)
        exit(1)

    # cancel_all_orders(SYMBOL)
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ WebSocket
    historical_df = load_historical_data(SYMBOL, INTERVAL, hours=24)
    if not historical_df.empty:
        df_stream = pd.concat([df_stream, historical_df]).drop_duplicates()
        df_stream.sort_index(inplace=True)
        print(f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã | –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df_stream)}")

        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        if len(df_stream) >= 26:
            execute_strategy(df_stream, send_telegram_message, place_order, SYMBOL)
        if len(df_stream) >= 50:
            execute_grid_strategy(df_stream, send_telegram_message, place_order, SYMBOL)

    # –ó–∞–ø—É—Å–∫ WebSocket
    ws_manager = BinanceFuturesWebSocketManager(SYMBOL, INTERVAL, process_message)
    ws_manager.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        ws_manager.stop()