TRADE_QUANTITY = 0.002

def calculate_indicators(df, window=14):
    """
    –†–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: RSI, MACD, Signal
    """
    df = df.copy()

    # RSI
    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()

    rs = avg_gain / avg_loss
    df['rsi'] = 100 - (100 / (1 + rs))

    # MACD
    df['ema12'] = df['Close'].ewm(span=12, adjust=False).mean()
    df['ema26'] = df['Close'].ewm(span=26, adjust=False).mean()
    df['macd_line'] = df['ema12'] - df['ema26']
    df['signal_line'] = df['macd_line'].ewm(span=9, adjust=False).mean()
    df['macd_hist'] = df['macd_line'] - df['signal_line']

    return df


def execute_strategy(df, send_telegram_message, place_order_func, symbol="BTCUSDT"):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ MACD
    """
    df = calculate_indicators(df)

    if len(df) < 26:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    latest = df.iloc[-1]
    prev = df.iloc[-2]

    print(f"üìâ RSI: {latest['rsi']:.2f}")
    print(f"üìâ MACD: {latest['macd_line']:.2f} | Signal: {latest['signal_line']:.2f}")

    # –ü–æ–∫—É–ø–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É RSI+MACD
    if latest['rsi'] < 30 and latest['macd_line'] > latest['signal_line'] and prev['macd_line'] <= \
            prev['signal_line']:
        message = f"üü¢ [RSI+MACD] –ü–æ–∫—É–ø–∫–∞ {symbol}\n–¶–µ–Ω–∞: {latest['Close']:.2f}$\nRSI: {latest['rsi']:.2f}"
        send_telegram_message(message)
        place_order_func(symbol, 'buy', TRADE_QUANTITY)

    # –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É RSI+MACD
    elif latest['rsi'] > 70 and latest['macd_line'] < latest['signal_line'] and prev['macd_line'] >= \
            prev['signal_line']:
        message = f"üî¥ [RSI+MACD] –ü—Ä–æ–¥–∞–∂–∞ {symbol}\n–¶–µ–Ω–∞: {latest['Close']:.2f}$\nRSI: {latest['rsi']:.2f}"
        send_telegram_message(message)
        place_order_func(symbol, 'sell', TRADE_QUANTITY)


def execute_grid_strategy(df, send_telegram_message, place_order_func, symbol="BTCUSDT", dry_run=False):
    grid_info = calculate_grid_levels(df)
    print(f"üìä –£—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏: {grid_info['levels']}")

    if not dry_run:
        detect_grid_signal(df, grid_info, send_telegram_message, place_order_func, symbol=symbol)

    return grid_info['levels']


def calculate_grid_levels(df, grid_size=50, num_levels=5):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ —É—Ä–æ–≤–Ω–µ–π –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    """
    latest_price = df['Close'].iloc[-1]
    avg_price = df['Close'].rolling(window=grid_size).mean().iloc[-1]

    step = avg_price * 0.001  # —à–∞–≥ 0.1%
    levels = [round(avg_price - step * i, 2) for i in range(num_levels, 0, -1)] + \
             [round(avg_price + step * i, 2) for i in range(1, num_levels + 1)]

    return {
        'avg_price': avg_price,
        'latest_price': latest_price,
        'levels': sorted(levels)
    }


def detect_grid_signal(df, grid_info, send_telegram_message, place_order_func, symbol="BTCUSDT"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –æ–∫–æ–ª–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏
    """
    latest_price = df['Close'].iloc[-1]
    levels = grid_info['levels']

    for level in levels:
        if abs(latest_price - level) < 1:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä—è–¥–æ–º —Å —É—Ä–æ–≤–Ω–µ–º
            if latest_price < level:
                message = f"üü¢ [GRID] –¶–µ–Ω–∞ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è {level} | BUY"
                place_order_func(symbol, 'buy', TRADE_QUANTITY)
            else:
                message = f"üî¥ [GRID] –¶–µ–Ω–∞ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è {level} | SELL"
                place_order_func(symbol, 'sell', TRADE_QUANTITY)

            send_telegram_message(message)