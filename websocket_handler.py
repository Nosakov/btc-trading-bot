from binance.websocket.spot.websocket_stream import SpotWebsocketStreamClient
import logging

logger = logging.getLogger(__name__)

class BinanceWebSocketManager:
    def __init__(self, symbol: str, interval: str, callback):
        self.symbol = symbol.lower()
        self.interval = interval
        self.callback = callback
        self.ws_client = None

    def start(self):
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket: {self.symbol.upper()} | {self.interval}")
        self.ws_client = SpotWebsocketStreamClient(
            on_message=self._on_message,
            on_error=lambda ws, error: self._on_error(error),
            on_close=lambda ws, code, reason: self._on_close(code, reason),
            on_open=lambda ws: self._on_open(),
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ —Å–≤–µ—á–µ–π
        self.ws_client.subscribe(stream=f"{self.symbol}@kline_{self.interval}")

    def _on_open(self):
        logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")

    def _on_message(self, ws, msg):
        logger.debug("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", msg)
        try:
            self.callback(msg)
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    def _on_error(self, error):
        logger.error("‚ùå –û—à–∏–±–∫–∞ WebSocket: %s", error)

    def _on_close(self, code=None, reason=None):
        logger.info(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: {code}, –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    def stop(self):
        if self.ws_client:
            self.ws_client.stop()
            logger.info("üõë WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")